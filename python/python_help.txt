File containing references

* Debug:
python -m pdb <script.py> - Lauches python debug shell and 1by1 lines are executed. Or break can be set
Cmds - b <line#> to insert break ; n - next ; c - continue

* Useful functions
- repr - converts to a python expression and returns a string

* Data Types:
- Strings , raw strings
- int 
 
Operations
Slicing, Indexing, Multiply, Add , check membership, delete
Eg. del list_name[3]

* Data structures - 6 builtin sequences
- List, tuples and strings are also sequences as the elements are numbered in sequence
- List - Can be modified
- Tuple - cannot modify like strings. There are no append, sort possible like list.

* Mappings 
- Dictionaries (dict)
- Assigning one dict to another just copies the reference, modifying the copied one will affect the original dict. Check the use of copy and deepcopy.
  copy - shallow copy of keys and values. if value is list then again reference is made. so any change/add/del to key will not affect the copied obj but if list is modified then it will be reflected in the copied object as well.
- iterkeys method to iterate over dictionary object

* Containers
One type data type within another. Eg list within a list.

* Classes
- __metatype__ == type ; to use new class styles. There are 2 types, old & new. 
- Each methods 1st argument is its own object/instance called self.
- All attributes, methods are accessible by directly referencing the objects. To make private methods, use __ before the method name. Still there is a way to access these private methods if we know how these methods are stored. Using a single _ before methods make them strictly private but have some limiations like they cannot be imported using * like 'from module import *' wont import these methods.
- It is possible to find whether a class is a subclass of another class or not. Can also find the base class given a class. 
- Class has its own namespace which can be shared with all the objects of this class. If any of the object modifies any global attribute then a copy is made for that object.
- __init__ is the constructor for any class. Need to use 'super' for access the constructors of parent classes. super is present only in new class styles. 
- __funname__ (start & end with __) are special functions. Can implement obj[idx] for user defined objects using these special methods like __getitem__ or an iterator using __itr__ & next(). Similar methods for __setitem__, __len__. 

* Exceptions:
- Raise meaningful user defined exceptions apart from the well defined ones.
- try+except+else+finally block to handle exceptions
- Else can be used in conjunction with except and finally is called in any case whether an exception occurred or not which can be used for cleaning up

* Generators:
- Use yield keyword, similar to return but the function freezes there and when called again continues from where it is left.
- there are other forms as well, like  "square = (i*i for i in irange(1000000))"in which 'square' is a generator
- generator form of 'range' command is 'xrange' which will return a iterator instead of a list. xrange will be faster for larger numbers as whole list is not created on the fly.

* sockets
- urllib & urllib2 are useful in extracting webpages. Data can be extracted using 're' modules
- telnetlib will be really useful
- SocketServer implements useful libraries for writing applications. Like starting a server supporting multiple clients.

Other useful titbits:
- * as function argument in an assignment. Carries all the elements passed to this function in a tuple
- Another use of * is to expand a tuple
- ** as functiona argument does the above but stores all in key,value pairs in a dictionary
- Another use of ** is to expand a dictionary
- 'is' operator tests for identity and not for equality. 
- enumerate - useful in iterating
- there is 'else' for 'for' statement as well
- slice of any object returns a copy and wont be pointing to same reference
- dir(imported module name) - Gives the list of functions exported 
- vars(), locals() can give the available user defined & inbuilt methods in the name space. vars(obj) will give the attributes associated with the argument.
- Get to source file using __file__ . Eg. copy.__file__. Few built in libraries wont display source
- sys.argv[] 
- string.index & string.find gets the substring position in string. It can be used along with map() like map(s.find, s) which returns a list of position for each character in s. str.index is very much similar to str.find()
- map(function, sequence) - Returns a list by applying function on the sequence.
- [expression for expr in sequence if condition] - Returns a new list based on the expression matching the if condition for each of the items in the sequence.
